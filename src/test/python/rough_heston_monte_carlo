#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Sep  1 12:31:40 2021

@author: caleb
"""

import numpy as np
import scipy.special as sp

def MCPrice(S0, K, T, r, Lambda, gamma, rho, theta, v0, alpha):
    dt = 1/100
    timesteps = T * 100
    N = 100000
    
    Z1 = np.random.normal(0, 1, (timesteps, N))
    Z2 = np.random.normal(0, 1, (timesteps, N))
    
    # Random gaussian 
    W1 = Z1
    W2 = rho * Z1 + np.sqrt(1 - rho * rho) * Z2

    # Stock prices and volatilities
    St = np.zeros((timesteps+1, N))
    Vt = np.zeros((timesteps+1, N))

    # Initial values 
    St[0] = S0
    Vt[0] = v0
    
    # Weights
    a = np.arange(timesteps)
    b = np.arange(timesteps)
    
    # Calculate Adam's weights
    a = np.power(timesteps - a, alpha) - np.power(timesteps - a - 1, alpha)
    b = np.power(timesteps - a, alpha-1) - np.power(timesteps - a - 1, alpha-1)
    
    # Calculate d1 and d2
    d1 = a * np.power(dt, alpha)/sp.gamma(alpha + 1)
    d2 = b * np.power(dt, alpha-1)/sp.gamma(alpha) * (alpha - 1)
    
    for k in range(timesteps):
        Vt[k+1] = Vt[k] + np.sum(d1[:k]) *Lambda *(theta - Vt[k]) + np.sum(d2[:k]) * Lambda * gamma * np.sqrt(Vt[k]) * (alpha - 1) * W2[k]
        St[k+1] = St[k] * ( 1 + dt*r + np.sqrt(Vt[k] * dt) * W1[k])
                 
    return np.mean(np.maximum(St[timesteps]-K, 0))

S0, K, T, r, Lambda, gamma, rho, theta, v0, alpha = 100, 100, 1, 0.0, 0.3647, 0.1, -0.5711, 0.0398, 0.0175, 0.6
price = MCPrice(S0, K, T, r, Lambda, gamma, rho, theta, v0, alpha)  
print(price)